"""Quiz about issues."""

# 1. Что такое Issues на GitHub и для чего они используются?
#
# Issues - это инструмент управления задачами, с помощью которого можно предлагать новый функционал в проект, просить объяснения непонятых элементов в коде и т.п., рассказывать про баги/ошибки в работе проекта.

# 2. Чем Issues отличаются от других инструментов управления задачами?
#
# Issues, позволяет взаимодействовать с разными проектами, при этом никак не внося изменений в них.

# 3. Какие основные компоненты (поля) есть у каждого Issue?
#
# Title - название, description - описание.

# 4. Как создать новое Issue в репозитории?
#
# Перейти во вкладку Issues и нажать New issue или перейти в файл, который вам нужен, выделить необходимые строчки и нажать на +.

# 5. Какие данные рекомендуется указывать в описании Issue для лучшего понимания задачи?
#
# Затрагиваемые участки кода, если такие есть.

# 6. Какие теги (labels) можно добавить к Issue? Какие из них стандартные?
#
# Bug, documentation, duplicate, enhancement, good first issue, help wanted, invalid, question, wontfix - стандартные, так же можно создать свои новые labels.

# 7. Как прикрепить Assignees (ответственных) к Issue?
#
# При создании issue в панели справа нажать Assignees и добавить необходимых людей.

# 8. Как использовать Labels для классификации задач?
#
# Исходя из вашей задачи выберите один из стандартных Label:
# - bug: something isn't working;
# - documentation: improvements or additions to documentation;
# - duplicate: this issue or pull request already exists;
# - enhancement: new feature or request;
# - good first issue: good for newcomers;
# - help wanted: extra attention is needed;
# - invalid: this doesn't seem right;
# - question: further information is requested;
# - wontfix: this will not be worked on.

# 9. Для чего нужен Milestone, и как связать его с Issue?
#
# Milestone позволяет создавать дедлайны для проектов, к которым будут привязаны все соответствующие изменения. Чтобы связать его с Issue, во время создания Issue, на панели в правой части экрана необходимо нажать Milestone и выбрать необходимый или создать новый.

# 10. Как привязать Issue к пул-реквесту (Pull Request)?
#
# В названии пул-реквеста указать название issue, а описание должно обязательно содержать `Closes #номер_issue`.

# 11. Как добавить комментарий к существующему Issue?
#
# Перейти на страничку issue и в окне Add a comment оставить новый комментарий.

# 12. Как добавить комментарий к существующему Issue?
#
# Перейти на страничку issue и снизу нажать кнопку Close issue.

# 13. Можно ли автоматически закрыть Issue с помощью сообщения в коммите или пул-реквесте? Как это сделать?
#
# Да можно, нужно в описании коммита/пул-реквеста написать `Closes #номер_issue`，в названии коммита добавить `... (#номер_issue)`, а в названии пул-реквеста указать название самого issue.

# 14. Как повторно открыть закрытое **Issue**, если работа еще не завершена?
#
# На странице закрытого **Issue** необходимо нажать "Reopen issue".

# 15. Как найти все открытые или закрытые **Issues** в репозитории?
#
# На верхней панели репозитория нужно выбрать вкладку "Issues".

# 16. Как использовать фильтры для поиска **Issues** по меткам, исполнителям или другим критериям?
#
# Выбрав опцию "Open" можно увидеть только открытые **Issue**, а "Closed" - только закрытые. В "Author" можно ввести ник пользователя, чтобы увидеть какие **Issues** были им созданы. В "Labels" можно выбрать одну из стандартных меток ("bug", "feature" и т.д.) и увидеть **Issues** которые их содержат. Во вкладке "Projects" можно выбрать один из проектов репозитория и отобразить **Issues**, которые к нему привязаны. "Milestones" - отобразит **Issues** привязанные к выбранному дедлайну. "Assignees" - отобразит **Issues**, к которым привязаны выбранные из списка люди.

# 17. Как сортировать **Issues** по приоритету, дате создания или другим параметрам?
#
# Перейдя во вкладку **Issues** в верхней панели репозитория, необходимо нажать на кнопку с тремя точками, находящуюся в правой верхней части списка и там выбрать необходимый параметр, по которому будет происходить сортировка (приоритет, дата создания).

# 18. Как настроить автоматические уведомления о новых или изменённых **Issues**?
#
# В нужном репозитории во вкладке "Code" нужно нажать на кнопку "Watch", затем нажать "Custom" и выбрать "Issues" из списка возможных действий, о которых нужно уведомлять.

# 19. Что такое Projects в контексте GitHub, и как связать их с **Issues**?
#
# Projects - инструмент для управления задачами и организации работы, связанной с репозиторием. Projects можно связать с Issues, если на страничке нужного Issue перейти в правой боковой панели в раздел "Projects", нажать "Add to Project" и выбрать из списка необходимый.

# 20. Какие сторонние инструменты можно использовать для автоматизации работы с **Issues** (например, боты, Webhooks)?
#
#  - Probot (фреймворк для создания GitHub-ботов на Node.js.), на нем сделаны такие инструменты как Stale (закрывает неактивные Issues), Welcome (приветствует новых участников), Labeler (автоматически ставит метки по содержимому).
#
#  - Готовые боты:
#     - Dependabot (автоматизирует зависимости, но также может создавать Issues/PR);
#     - PullReminders/Linear (отправляют напоминания о незакрытых Issues/PR);
#     - Mergify (хотя ориентирован на PR, может реагировать и на Issues через условия).
#
# - Собственные Webhooks:
#     В репозитории Settings → Webhooks → Add webhook. Укажите URL вашего сервера (например, на Flask, Express, FastAPI). Подпишитесь на события: issues, issue_comment, labels и т.д. Обрабатывайте JSON-полезную нагрузку и нужные выполняйте действия.

# 21. Как упомянуть другого пользователя в комментарии к **Issue**?
#
# `@ник_пользователя`

# 22. Как запросить дополнительные данные или уточнения у автора **Issue**?
#
# Спросить в комментарии к нужному **Issue**.

# 23. Что делать, если **Issue** неактуально или его нужно объединить с другим?
#
# Если **Issue** неактуален, то его необходимо закрыть и написать в комментарии причины неактуальности.
#
# Если **Issue** необходимо объединить с другим, то нужно скопировать информацию из одного **Issue** в другой, и в том, информация из которого была перенесёна, сообщить об этом в комментариях, и закрыть его.

# 24. Как использовать шаблоны для создания **Issues**?
#
# Нужно создать папку в .github/ISSUE_TEMPLATE, а затем файлы в формате Markdown с самими шаблонами:
#
# .github/<br><br>
# └── ISSUE_TEMPLATE/
# <pre>    ├── bug_report.md</pre>
# <pre>    ├── feature_request.md</pre>
# <pre>    └── custom.md</pre>
#
# Внутри файлов поля в --- (YAML front matter) управляют поведением:
# * name — отображается в списке шаблонов
# * about — краткое описание
# * title — можно оставить пустым, чтобы пользователь сам ввёл
# * labels, assignees — автоматически применяются при создании Issue

# 25. Что такое **Linked Issues**, и как создать связь между задачами?
#
# GitHub автоматически связывает Issue с Pull Request (или другим Issue), если в описании или комментарии PR/Issue использовать специальные ключевые слова + номер задачи.
#
# Поддерживаемые ключевые слова:
# * close, closes, closed
# * fix, fixes, fixed
# * resolve, resolves, resolved

# 26. Какие метрики (например, время выполнения) можно отслеживать с помощью Issues?
#
# - Время до первого ответа;
# - время в статусе "To Do"/"Backlog";
# - время выполнения (Cycle Time);
# - общее время жизни Issue (Lead Time);
# - время ожидания ревью/тестирования.

# 27. Какие best practices рекомендуются при работе с **Issues** в команде?
#
# - Используйте шаблоны для создания Issues (это стандартизирует отчёты и помогает собирать всю необходимую информацию с первого раза).
# - Назначайте ответственного (assignee) за каждую задачу (даже если работа ещё не началась — это предотвращает ситуацию, когда «никто не отвечает»).
# - Применяйте метки (labels) последовательно и по договорённости в команде (например, `bug`, `priority:high`, `module:api` — это упрощает фильтрацию и приоритизацию).
# - Пишите чёткие и информативные заголовки (заголовок должен сразу давать понять суть задачи без открытия Issue).
# - Всегда закрывайте Issues с пояснением (укажите, почему задача закрыта: исправлена, дубликат, отменена и т.д.).
# - Связывайте Issues с Pull Requests с помощью ключевых слов (например, `Fixes #123` — это создаёт прозрачную связь между проблемой и её решением).
# - Регулярно проводите triage — сортировку и актуализацию задач (это помогает избавляться от дубликатов, уточнять неясные запросы и поддерживать порядок в backlog’е).
# - Не оставляйте Issues надолго без движения (если задача неактивна больше месяца — уточните статус или пометьте как `stale`).
# - Используйте доски (Projects, Kanban) для визуализации workflow (это упрощает планирование спринтов и отслеживание прогресса).
# - Направляйте вопросы и обсуждения не в Issues, а в Discussions или чат (Issues — для конкретных задач, а не для общих вопросов).
# - Обновляйте статус задачи в комментариях при изменении контекста (например, «заблокировано ожиданием API от другой команды»).
# - Отвечайте вежливо даже на некорректные или дублирующие Issues (это поддерживает здоровую культуру взаимодействия, особенно в open source).
# - Закрывайте или архивируйте устаревшие задачи (большой «мёртвый» backlog снижает доверие к системе и мешает фокусироваться на важном).
# - Настройте уведомления и автоматизацию разумно (избегайте «шума» — уведомления должны быть полезными, а не раздражающими).
# - Документируйте правила работы с Issues в CONTRIBUTING.md или внутреннем гайде (это ускоряет вхождение новых участников и обеспечивает единый подход).

#
